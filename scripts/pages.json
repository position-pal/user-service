[{"name":"fun mapFromGrpcGroup(grpcGroup: GroupOuterClass.Group): Group","description":"Converter.mapFromGrpcGroup","location":"presentation/[root]/-converter/map-from-grpc-group.html","searchKeys":["mapFromGrpcGroup","fun mapFromGrpcGroup(grpcGroup: GroupOuterClass.Group): Group","Converter.mapFromGrpcGroup"]},{"name":"fun mapFromGrpcUser(grpcUser: UserOuterClass.User): User","description":"Converter.mapFromGrpcUser","location":"presentation/[root]/-converter/map-from-grpc-user.html","searchKeys":["mapFromGrpcUser","fun mapFromGrpcUser(grpcUser: UserOuterClass.User): User","Converter.mapFromGrpcUser"]},{"name":"fun mapFromGrpcUserData(grpcUserData: UserOuterClass.UserData): UserData","description":"Converter.mapFromGrpcUserData","location":"presentation/[root]/-converter/map-from-grpc-user-data.html","searchKeys":["mapFromGrpcUserData","fun mapFromGrpcUserData(grpcUserData: UserOuterClass.UserData): UserData","Converter.mapFromGrpcUserData"]},{"name":"fun mapToGrpcGroup(group: Group): GroupOuterClass.Group","description":"Converter.mapToGrpcGroup","location":"presentation/[root]/-converter/map-to-grpc-group.html","searchKeys":["mapToGrpcGroup","fun mapToGrpcGroup(group: Group): GroupOuterClass.Group","Converter.mapToGrpcGroup"]},{"name":"fun mapToGrpcUser(user: User): UserOuterClass.User","description":"Converter.mapToGrpcUser","location":"presentation/[root]/-converter/map-to-grpc-user.html","searchKeys":["mapToGrpcUser","fun mapToGrpcUser(user: User): UserOuterClass.User","Converter.mapToGrpcUser"]},{"name":"fun mapToGrpcUserData(userData: UserData): UserOuterClass.UserData","description":"Converter.mapToGrpcUserData","location":"presentation/[root]/-converter/map-to-grpc-user-data.html","searchKeys":["mapToGrpcUserData","fun mapToGrpcUserData(userData: UserData): UserOuterClass.UserData","Converter.mapToGrpcUserData"]},{"name":"object Converter","description":"Converter","location":"presentation/[root]/-converter/index.html","searchKeys":["Converter","object Converter","Converter"]},{"name":"abstract fun addMember(groupId: String, userData: UserData): Group?","description":"group.GroupRepository.addMember","location":"application/group/-group-repository/add-member.html","searchKeys":["addMember","abstract fun addMember(groupId: String, userData: UserData): Group?","group.GroupRepository.addMember"]},{"name":"abstract fun addMember(groupId: String, userData: UserData): Group?","description":"group.GroupService.addMember","location":"application/group/-group-service/add-member.html","searchKeys":["addMember","abstract fun addMember(groupId: String, userData: UserData): Group?","group.GroupService.addMember"]},{"name":"abstract fun authenticate(email: String, password: String): String?","description":"auth.AuthService.authenticate","location":"application/auth/-auth-service/authenticate.html","searchKeys":["authenticate","abstract fun authenticate(email: String, password: String): String?","auth.AuthService.authenticate"]},{"name":"abstract fun authorize(token: String): Boolean","description":"auth.AuthService.authorize","location":"application/auth/-auth-service/authorize.html","searchKeys":["authorize","abstract fun authorize(token: String): Boolean","auth.AuthService.authorize"]},{"name":"abstract fun checkCredentials(email: String, password: String): Boolean","description":"auth.AuthRepository.checkCredentials","location":"application/auth/-auth-repository/check-credentials.html","searchKeys":["checkCredentials","abstract fun checkCredentials(email: String, password: String): Boolean","auth.AuthRepository.checkCredentials"]},{"name":"abstract fun close()","description":"MessageAdapter.close","location":"application/[root]/-message-adapter/close.html","searchKeys":["close","abstract fun close()","MessageAdapter.close"]},{"name":"abstract fun createGroup(group: Group): Group","description":"group.GroupService.createGroup","location":"application/group/-group-service/create-group.html","searchKeys":["createGroup","abstract fun createGroup(group: Group): Group","group.GroupService.createGroup"]},{"name":"abstract fun createUser(user: User): User","description":"user.UserService.createUser","location":"application/user/-user-service/create-user.html","searchKeys":["createUser","abstract fun createUser(user: User): User","user.UserService.createUser"]},{"name":"abstract fun deleteById(groupId: String): Boolean","description":"group.GroupRepository.deleteById","location":"application/group/-group-repository/delete-by-id.html","searchKeys":["deleteById","abstract fun deleteById(groupId: String): Boolean","group.GroupRepository.deleteById"]},{"name":"abstract fun deleteById(userId: String): Boolean","description":"user.UserRepository.deleteById","location":"application/user/-user-repository/delete-by-id.html","searchKeys":["deleteById","abstract fun deleteById(userId: String): Boolean","user.UserRepository.deleteById"]},{"name":"abstract fun deleteGroup(groupId: String): Boolean","description":"group.GroupService.deleteGroup","location":"application/group/-group-service/delete-group.html","searchKeys":["deleteGroup","abstract fun deleteGroup(groupId: String): Boolean","group.GroupService.deleteGroup"]},{"name":"abstract fun deleteUser(userId: String): Boolean","description":"user.UserService.deleteUser","location":"application/user/-user-service/delete-user.html","searchKeys":["deleteUser","abstract fun deleteUser(userId: String): Boolean","user.UserService.deleteUser"]},{"name":"abstract fun findAll(): List<Group>","description":"group.GroupRepository.findAll","location":"application/group/-group-repository/find-all.html","searchKeys":["findAll","abstract fun findAll(): List<Group>","group.GroupRepository.findAll"]},{"name":"abstract fun findAll(): List<User>","description":"user.UserRepository.findAll","location":"application/user/-user-repository/find-all.html","searchKeys":["findAll","abstract fun findAll(): List<User>","user.UserRepository.findAll"]},{"name":"abstract fun findById(groupId: String): Group?","description":"group.GroupRepository.findById","location":"application/group/-group-repository/find-by-id.html","searchKeys":["findById","abstract fun findById(groupId: String): Group?","group.GroupRepository.findById"]},{"name":"abstract fun findById(userId: String): User?","description":"user.UserRepository.findById","location":"application/user/-user-repository/find-by-id.html","searchKeys":["findById","abstract fun findById(userId: String): User?","user.UserRepository.findById"]},{"name":"abstract fun getGroup(groupId: String): Group?","description":"group.GroupService.getGroup","location":"application/group/-group-service/get-group.html","searchKeys":["getGroup","abstract fun getGroup(groupId: String): Group?","group.GroupService.getGroup"]},{"name":"abstract fun getUser(userId: String): User?","description":"user.UserService.getUser","location":"application/user/-user-service/get-user.html","searchKeys":["getUser","abstract fun getUser(userId: String): User?","user.UserService.getUser"]},{"name":"abstract fun postEvent(type: EventType, event: Event)","description":"MessageAdapter.postEvent","location":"application/[root]/-message-adapter/post-event.html","searchKeys":["postEvent","abstract fun postEvent(type: EventType, event: Event)","MessageAdapter.postEvent"]},{"name":"abstract fun removeMember(groupId: String, userData: UserData): Group?","description":"group.GroupRepository.removeMember","location":"application/group/-group-repository/remove-member.html","searchKeys":["removeMember","abstract fun removeMember(groupId: String, userData: UserData): Group?","group.GroupRepository.removeMember"]},{"name":"abstract fun removeMember(groupId: String, userData: UserData): Group?","description":"group.GroupService.removeMember","location":"application/group/-group-service/remove-member.html","searchKeys":["removeMember","abstract fun removeMember(groupId: String, userData: UserData): Group?","group.GroupService.removeMember"]},{"name":"abstract fun save(group: Group): Group","description":"group.GroupRepository.save","location":"application/group/-group-repository/save.html","searchKeys":["save","abstract fun save(group: Group): Group","group.GroupRepository.save"]},{"name":"abstract fun save(user: User): User","description":"user.UserRepository.save","location":"application/user/-user-repository/save.html","searchKeys":["save","abstract fun save(user: User): User","user.UserRepository.save"]},{"name":"abstract fun update(group: Group): Group?","description":"group.GroupRepository.update","location":"application/group/-group-repository/update.html","searchKeys":["update","abstract fun update(group: Group): Group?","group.GroupRepository.update"]},{"name":"abstract fun update(user: User): User?","description":"user.UserRepository.update","location":"application/user/-user-repository/update.html","searchKeys":["update","abstract fun update(user: User): User?","user.UserRepository.update"]},{"name":"abstract fun updateGroup(groupId: String, group: Group): Group?","description":"group.GroupService.updateGroup","location":"application/group/-group-service/update-group.html","searchKeys":["updateGroup","abstract fun updateGroup(groupId: String, group: Group): Group?","group.GroupService.updateGroup"]},{"name":"abstract fun updateUser(userId: String, user: User): User?","description":"user.UserService.updateUser","location":"application/user/-user-service/update-user.html","searchKeys":["updateUser","abstract fun updateUser(userId: String, user: User): User?","user.UserService.updateUser"]},{"name":"class AuthServiceImpl(authRepository: AuthRepository, secret: Secret, issuer: Issuer, audience: Audience, expirationTime: Int = EXPIRATION_TIME) : AuthService","description":"auth.AuthServiceImpl","location":"application/auth/-auth-service-impl/index.html","searchKeys":["AuthServiceImpl","class AuthServiceImpl(authRepository: AuthRepository, secret: Secret, issuer: Issuer, audience: Audience, expirationTime: Int = EXPIRATION_TIME) : AuthService","auth.AuthServiceImpl"]},{"name":"class GroupServiceImpl(groupRepository: GroupRepository, messageAdapter: MessageAdapter) : GroupService","description":"group.GroupServiceImpl","location":"application/group/-group-service-impl/index.html","searchKeys":["GroupServiceImpl","class GroupServiceImpl(groupRepository: GroupRepository, messageAdapter: MessageAdapter) : GroupService","group.GroupServiceImpl"]},{"name":"class UserServiceImpl(userRepository: UserRepository) : UserService","description":"user.UserServiceImpl","location":"application/user/-user-service-impl/index.html","searchKeys":["UserServiceImpl","class UserServiceImpl(userRepository: UserRepository) : UserService","user.UserServiceImpl"]},{"name":"const val EXPIRATION_TIME: Int = 6000000","description":"auth.EXPIRATION_TIME","location":"application/auth/-e-x-p-i-r-a-t-i-o-n_-t-i-m-e.html","searchKeys":["EXPIRATION_TIME","const val EXPIRATION_TIME: Int = 6000000","auth.EXPIRATION_TIME"]},{"name":"constructor(authRepository: AuthRepository, secret: Secret, issuer: Issuer, audience: Audience, expirationTime: Int = EXPIRATION_TIME)","description":"auth.AuthServiceImpl.AuthServiceImpl","location":"application/auth/-auth-service-impl/-auth-service-impl.html","searchKeys":["AuthServiceImpl","constructor(authRepository: AuthRepository, secret: Secret, issuer: Issuer, audience: Audience, expirationTime: Int = EXPIRATION_TIME)","auth.AuthServiceImpl.AuthServiceImpl"]},{"name":"constructor(groupRepository: GroupRepository, messageAdapter: MessageAdapter)","description":"group.GroupServiceImpl.GroupServiceImpl","location":"application/group/-group-service-impl/-group-service-impl.html","searchKeys":["GroupServiceImpl","constructor(groupRepository: GroupRepository, messageAdapter: MessageAdapter)","group.GroupServiceImpl.GroupServiceImpl"]},{"name":"constructor(userRepository: UserRepository)","description":"user.UserServiceImpl.UserServiceImpl","location":"application/user/-user-service-impl/-user-service-impl.html","searchKeys":["UserServiceImpl","constructor(userRepository: UserRepository)","user.UserServiceImpl.UserServiceImpl"]},{"name":"fun interface AuthRepository","description":"auth.AuthRepository","location":"application/auth/-auth-repository/index.html","searchKeys":["AuthRepository","fun interface AuthRepository","auth.AuthRepository"]},{"name":"interface AuthService","description":"auth.AuthService","location":"application/auth/-auth-service/index.html","searchKeys":["AuthService","interface AuthService","auth.AuthService"]},{"name":"interface GroupRepository","description":"group.GroupRepository","location":"application/group/-group-repository/index.html","searchKeys":["GroupRepository","interface GroupRepository","group.GroupRepository"]},{"name":"interface GroupService","description":"group.GroupService","location":"application/group/-group-service/index.html","searchKeys":["GroupService","interface GroupService","group.GroupService"]},{"name":"interface MessageAdapter","description":"MessageAdapter","location":"application/[root]/-message-adapter/index.html","searchKeys":["MessageAdapter","interface MessageAdapter","MessageAdapter"]},{"name":"interface UserRepository","description":"user.UserRepository","location":"application/user/-user-repository/index.html","searchKeys":["UserRepository","interface UserRepository","user.UserRepository"]},{"name":"interface UserService","description":"user.UserService","location":"application/user/-user-service/index.html","searchKeys":["UserService","interface UserService","user.UserService"]},{"name":"open override fun addMember(groupId: String, userData: UserData): Group?","description":"group.GroupServiceImpl.addMember","location":"application/group/-group-service-impl/add-member.html","searchKeys":["addMember","open override fun addMember(groupId: String, userData: UserData): Group?","group.GroupServiceImpl.addMember"]},{"name":"open override fun authenticate(email: String, password: String): String?","description":"auth.AuthServiceImpl.authenticate","location":"application/auth/-auth-service-impl/authenticate.html","searchKeys":["authenticate","open override fun authenticate(email: String, password: String): String?","auth.AuthServiceImpl.authenticate"]},{"name":"open override fun authorize(token: String): Boolean","description":"auth.AuthServiceImpl.authorize","location":"application/auth/-auth-service-impl/authorize.html","searchKeys":["authorize","open override fun authorize(token: String): Boolean","auth.AuthServiceImpl.authorize"]},{"name":"open override fun createGroup(group: Group): Group","description":"group.GroupServiceImpl.createGroup","location":"application/group/-group-service-impl/create-group.html","searchKeys":["createGroup","open override fun createGroup(group: Group): Group","group.GroupServiceImpl.createGroup"]},{"name":"open override fun createUser(user: User): User","description":"user.UserServiceImpl.createUser","location":"application/user/-user-service-impl/create-user.html","searchKeys":["createUser","open override fun createUser(user: User): User","user.UserServiceImpl.createUser"]},{"name":"open override fun deleteGroup(groupId: String): Boolean","description":"group.GroupServiceImpl.deleteGroup","location":"application/group/-group-service-impl/delete-group.html","searchKeys":["deleteGroup","open override fun deleteGroup(groupId: String): Boolean","group.GroupServiceImpl.deleteGroup"]},{"name":"open override fun deleteUser(userId: String): Boolean","description":"user.UserServiceImpl.deleteUser","location":"application/user/-user-service-impl/delete-user.html","searchKeys":["deleteUser","open override fun deleteUser(userId: String): Boolean","user.UserServiceImpl.deleteUser"]},{"name":"open override fun getGroup(groupId: String): Group?","description":"group.GroupServiceImpl.getGroup","location":"application/group/-group-service-impl/get-group.html","searchKeys":["getGroup","open override fun getGroup(groupId: String): Group?","group.GroupServiceImpl.getGroup"]},{"name":"open override fun getUser(userId: String): User?","description":"user.UserServiceImpl.getUser","location":"application/user/-user-service-impl/get-user.html","searchKeys":["getUser","open override fun getUser(userId: String): User?","user.UserServiceImpl.getUser"]},{"name":"open override fun removeMember(groupId: String, userData: UserData): Group?","description":"group.GroupServiceImpl.removeMember","location":"application/group/-group-service-impl/remove-member.html","searchKeys":["removeMember","open override fun removeMember(groupId: String, userData: UserData): Group?","group.GroupServiceImpl.removeMember"]},{"name":"open override fun updateGroup(groupId: String, group: Group): Group?","description":"group.GroupServiceImpl.updateGroup","location":"application/group/-group-service-impl/update-group.html","searchKeys":["updateGroup","open override fun updateGroup(groupId: String, group: Group): Group?","group.GroupServiceImpl.updateGroup"]},{"name":"open override fun updateUser(userId: String, user: User): User?","description":"user.UserServiceImpl.updateUser","location":"application/user/-user-service-impl/update-user.html","searchKeys":["updateUser","open override fun updateUser(userId: String, user: User): User?","user.UserServiceImpl.updateUser"]},{"name":"const val GRPC_PORT: String","description":"GRPC_PORT","location":"entrypoint/[root]/-g-r-p-c_-p-o-r-t.html","searchKeys":["GRPC_PORT","const val GRPC_PORT: String","GRPC_PORT"]},{"name":"const val RABBITMQ_PORT: String","description":"RABBITMQ_PORT","location":"entrypoint/[root]/-r-a-b-b-i-t-m-q_-p-o-r-t.html","searchKeys":["RABBITMQ_PORT","const val RABBITMQ_PORT: String","RABBITMQ_PORT"]},{"name":"fun main()","description":"main","location":"entrypoint/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"constructor(id: String, name: String, members: List<UserData>, createdBy: UserData)","description":"Group.Group","location":"domain/[root]/-group/-group.html","searchKeys":["Group","constructor(id: String, name: String, members: List<UserData>, createdBy: UserData)","Group.Group"]},{"name":"constructor(id: String, name: String, surname: String, email: String)","description":"UserData.UserData","location":"domain/[root]/-user-data/-user-data.html","searchKeys":["UserData","constructor(id: String, name: String, surname: String, email: String)","UserData.UserData"]},{"name":"constructor(userData: UserData, password: String)","description":"User.User","location":"domain/[root]/-user/-user.html","searchKeys":["User","constructor(userData: UserData, password: String)","User.User"]},{"name":"constructor(userId: String, groupId: String)","description":"Membership.Membership","location":"domain/[root]/-membership/-membership.html","searchKeys":["Membership","constructor(userId: String, groupId: String)","Membership.Membership"]},{"name":"constructor(value: String)","description":"Audience.Audience","location":"domain/[root]/-audience/-audience.html","searchKeys":["Audience","constructor(value: String)","Audience.Audience"]},{"name":"constructor(value: String)","description":"Issuer.Issuer","location":"domain/[root]/-issuer/-issuer.html","searchKeys":["Issuer","constructor(value: String)","Issuer.Issuer"]},{"name":"constructor(value: String)","description":"Secret.Secret","location":"domain/[root]/-secret/-secret.html","searchKeys":["Secret","constructor(value: String)","Secret.Secret"]},{"name":"data class Audience(val value: String)","description":"Audience","location":"domain/[root]/-audience/index.html","searchKeys":["Audience","data class Audience(val value: String)","Audience"]},{"name":"data class Group(val id: String, val name: String, val members: List<UserData>, val createdBy: UserData)","description":"Group","location":"domain/[root]/-group/index.html","searchKeys":["Group","data class Group(val id: String, val name: String, val members: List<UserData>, val createdBy: UserData)","Group"]},{"name":"data class Issuer(val value: String)","description":"Issuer","location":"domain/[root]/-issuer/index.html","searchKeys":["Issuer","data class Issuer(val value: String)","Issuer"]},{"name":"data class Membership(val userId: String, val groupId: String)","description":"Membership","location":"domain/[root]/-membership/index.html","searchKeys":["Membership","data class Membership(val userId: String, val groupId: String)","Membership"]},{"name":"data class Secret(val value: String)","description":"Secret","location":"domain/[root]/-secret/index.html","searchKeys":["Secret","data class Secret(val value: String)","Secret"]},{"name":"data class User(val userData: UserData, val password: String)","description":"User","location":"domain/[root]/-user/index.html","searchKeys":["User","data class User(val userData: UserData, val password: String)","User"]},{"name":"data class UserData(val id: String, val name: String, val surname: String, val email: String)","description":"UserData","location":"domain/[root]/-user-data/index.html","searchKeys":["UserData","data class UserData(val id: String, val name: String, val surname: String, val email: String)","UserData"]},{"name":"fun createTestGroup(id: String = UUID.randomUUID().toString(), name: String = \"Default\", members: List<UserData> = emptyList(), createdBy: UserData = createTestUser().userData): Group","description":"Common.createTestGroup","location":"domain/[root]/-common/create-test-group.html","searchKeys":["createTestGroup","fun createTestGroup(id: String = UUID.randomUUID().toString(), name: String = \"Default\", members: List<UserData> = emptyList(), createdBy: UserData = createTestUser().userData): Group","Common.createTestGroup"]},{"name":"fun createTestUser(id: String = UUID.randomUUID().toString(), name: String = \"Default\", surname: String = \"User\", email: String = UUID.randomUUID().toString() + \"@example.com\", password: String = \"password123\"): User","description":"Common.createTestUser","location":"domain/[root]/-common/create-test-user.html","searchKeys":["createTestUser","fun createTestUser(id: String = UUID.randomUUID().toString(), name: String = \"Default\", surname: String = \"User\", email: String = UUID.randomUUID().toString() + \"@example.com\", password: String = \"password123\"): User","Common.createTestUser"]},{"name":"object Common","description":"Common","location":"domain/[root]/-common/index.html","searchKeys":["Common","object Common","Common"]},{"name":"open override fun toString(): String","description":"Audience.toString","location":"domain/[root]/-audience/to-string.html","searchKeys":["toString","open override fun toString(): String","Audience.toString"]},{"name":"open override fun toString(): String","description":"Issuer.toString","location":"domain/[root]/-issuer/to-string.html","searchKeys":["toString","open override fun toString(): String","Issuer.toString"]},{"name":"open override fun toString(): String","description":"Secret.toString","location":"domain/[root]/-secret/to-string.html","searchKeys":["toString","open override fun toString(): String","Secret.toString"]},{"name":"val createdBy: UserData","description":"Group.createdBy","location":"domain/[root]/-group/created-by.html","searchKeys":["createdBy","val createdBy: UserData","Group.createdBy"]},{"name":"val email: String","description":"UserData.email","location":"domain/[root]/-user-data/email.html","searchKeys":["email","val email: String","UserData.email"]},{"name":"val groupId: String","description":"Membership.groupId","location":"domain/[root]/-membership/group-id.html","searchKeys":["groupId","val groupId: String","Membership.groupId"]},{"name":"val id: String","description":"Group.id","location":"domain/[root]/-group/id.html","searchKeys":["id","val id: String","Group.id"]},{"name":"val id: String","description":"UserData.id","location":"domain/[root]/-user-data/id.html","searchKeys":["id","val id: String","UserData.id"]},{"name":"val members: List<UserData>","description":"Group.members","location":"domain/[root]/-group/members.html","searchKeys":["members","val members: List<UserData>","Group.members"]},{"name":"val name: String","description":"Group.name","location":"domain/[root]/-group/name.html","searchKeys":["name","val name: String","Group.name"]},{"name":"val name: String","description":"UserData.name","location":"domain/[root]/-user-data/name.html","searchKeys":["name","val name: String","UserData.name"]},{"name":"val password: String","description":"User.password","location":"domain/[root]/-user/password.html","searchKeys":["password","val password: String","User.password"]},{"name":"val surname: String","description":"UserData.surname","location":"domain/[root]/-user-data/surname.html","searchKeys":["surname","val surname: String","UserData.surname"]},{"name":"val userData: UserData","description":"User.userData","location":"domain/[root]/-user/user-data.html","searchKeys":["userData","val userData: UserData","User.userData"]},{"name":"val userId: String","description":"Membership.userId","location":"domain/[root]/-membership/user-id.html","searchKeys":["userId","val userId: String","Membership.userId"]},{"name":"val value: String","description":"Audience.value","location":"domain/[root]/-audience/value.html","searchKeys":["value","val value: String","Audience.value"]},{"name":"val value: String","description":"Issuer.value","location":"domain/[root]/-issuer/value.html","searchKeys":["value","val value: String","Issuer.value"]},{"name":"val value: String","description":"Secret.value","location":"domain/[root]/-secret/value.html","searchKeys":["value","val value: String","Secret.value"]},{"name":"class InMemoryGroupRepository : GroupRepository","description":"InMemoryGroupRepository","location":"storage/[root]/-in-memory-group-repository/index.html","searchKeys":["InMemoryGroupRepository","class InMemoryGroupRepository : GroupRepository","InMemoryGroupRepository"]},{"name":"class InMemoryUserRepository : UserRepository","description":"InMemoryUserRepository","location":"storage/[root]/-in-memory-user-repository/index.html","searchKeys":["InMemoryUserRepository","class InMemoryUserRepository : UserRepository","InMemoryUserRepository"]},{"name":"class PostgresAuthRepository(db: Database = DBConnection.getDatabaseObject()) : AuthRepository","description":"PostgresAuthRepository","location":"storage/[root]/-postgres-auth-repository/index.html","searchKeys":["PostgresAuthRepository","class PostgresAuthRepository(db: Database = DBConnection.getDatabaseObject()) : AuthRepository","PostgresAuthRepository"]},{"name":"class PostgresGroupRepository(db: Database = DBConnection.getDatabaseObject()) : GroupRepository","description":"PostgresGroupRepository","location":"storage/[root]/-postgres-group-repository/index.html","searchKeys":["PostgresGroupRepository","class PostgresGroupRepository(db: Database = DBConnection.getDatabaseObject()) : GroupRepository","PostgresGroupRepository"]},{"name":"class PostgresUserRepository(db: Database = DBConnection.getDatabaseObject()) : UserRepository","description":"PostgresUserRepository","location":"storage/[root]/-postgres-user-repository/index.html","searchKeys":["PostgresUserRepository","class PostgresUserRepository(db: Database = DBConnection.getDatabaseObject()) : UserRepository","PostgresUserRepository"]},{"name":"constructor()","description":"InMemoryGroupRepository.InMemoryGroupRepository","location":"storage/[root]/-in-memory-group-repository/-in-memory-group-repository.html","searchKeys":["InMemoryGroupRepository","constructor()","InMemoryGroupRepository.InMemoryGroupRepository"]},{"name":"constructor()","description":"InMemoryUserRepository.InMemoryUserRepository","location":"storage/[root]/-in-memory-user-repository/-in-memory-user-repository.html","searchKeys":["InMemoryUserRepository","constructor()","InMemoryUserRepository.InMemoryUserRepository"]},{"name":"constructor(db: Database = DBConnection.getDatabaseObject())","description":"PostgresAuthRepository.PostgresAuthRepository","location":"storage/[root]/-postgres-auth-repository/-postgres-auth-repository.html","searchKeys":["PostgresAuthRepository","constructor(db: Database = DBConnection.getDatabaseObject())","PostgresAuthRepository.PostgresAuthRepository"]},{"name":"constructor(db: Database = DBConnection.getDatabaseObject())","description":"PostgresGroupRepository.PostgresGroupRepository","location":"storage/[root]/-postgres-group-repository/-postgres-group-repository.html","searchKeys":["PostgresGroupRepository","constructor(db: Database = DBConnection.getDatabaseObject())","PostgresGroupRepository.PostgresGroupRepository"]},{"name":"constructor(db: Database = DBConnection.getDatabaseObject())","description":"PostgresUserRepository.PostgresUserRepository","location":"storage/[root]/-postgres-user-repository/-postgres-user-repository.html","searchKeys":["PostgresUserRepository","constructor(db: Database = DBConnection.getDatabaseObject())","PostgresUserRepository.PostgresUserRepository"]},{"name":"fun getDatabaseObject(username: String? = null, password: String? = null, dbName: String? = null): Database","description":"DBConnection.getDatabaseObject","location":"storage/[root]/-d-b-connection/get-database-object.html","searchKeys":["getDatabaseObject","fun getDatabaseObject(username: String? = null, password: String? = null, dbName: String? = null): Database","DBConnection.getDatabaseObject"]},{"name":"object DBConnection","description":"DBConnection","location":"storage/[root]/-d-b-connection/index.html","searchKeys":["DBConnection","object DBConnection","DBConnection"]},{"name":"object Groups : BaseTable<Group> ","description":"Groups","location":"storage/[root]/-groups/index.html","searchKeys":["Groups","object Groups : BaseTable<Group> ","Groups"]},{"name":"object Memberships : BaseTable<Membership> ","description":"Memberships","location":"storage/[root]/-memberships/index.html","searchKeys":["Memberships","object Memberships : BaseTable<Membership> ","Memberships"]},{"name":"object Users : BaseTable<User> ","description":"Users","location":"storage/[root]/-users/index.html","searchKeys":["Users","object Users : BaseTable<User> ","Users"]},{"name":"open override fun addMember(groupId: String, userData: UserData): Group?","description":"InMemoryGroupRepository.addMember","location":"storage/[root]/-in-memory-group-repository/add-member.html","searchKeys":["addMember","open override fun addMember(groupId: String, userData: UserData): Group?","InMemoryGroupRepository.addMember"]},{"name":"open override fun addMember(groupId: String, userData: UserData): Group?","description":"PostgresGroupRepository.addMember","location":"storage/[root]/-postgres-group-repository/add-member.html","searchKeys":["addMember","open override fun addMember(groupId: String, userData: UserData): Group?","PostgresGroupRepository.addMember"]},{"name":"open override fun checkCredentials(email: String, password: String): Boolean","description":"PostgresAuthRepository.checkCredentials","location":"storage/[root]/-postgres-auth-repository/check-credentials.html","searchKeys":["checkCredentials","open override fun checkCredentials(email: String, password: String): Boolean","PostgresAuthRepository.checkCredentials"]},{"name":"open override fun deleteById(groupId: String): Boolean","description":"InMemoryGroupRepository.deleteById","location":"storage/[root]/-in-memory-group-repository/delete-by-id.html","searchKeys":["deleteById","open override fun deleteById(groupId: String): Boolean","InMemoryGroupRepository.deleteById"]},{"name":"open override fun deleteById(groupId: String): Boolean","description":"PostgresGroupRepository.deleteById","location":"storage/[root]/-postgres-group-repository/delete-by-id.html","searchKeys":["deleteById","open override fun deleteById(groupId: String): Boolean","PostgresGroupRepository.deleteById"]},{"name":"open override fun deleteById(userId: String): Boolean","description":"InMemoryUserRepository.deleteById","location":"storage/[root]/-in-memory-user-repository/delete-by-id.html","searchKeys":["deleteById","open override fun deleteById(userId: String): Boolean","InMemoryUserRepository.deleteById"]},{"name":"open override fun deleteById(userId: String): Boolean","description":"PostgresUserRepository.deleteById","location":"storage/[root]/-postgres-user-repository/delete-by-id.html","searchKeys":["deleteById","open override fun deleteById(userId: String): Boolean","PostgresUserRepository.deleteById"]},{"name":"open override fun findAll(): List<Group>","description":"InMemoryGroupRepository.findAll","location":"storage/[root]/-in-memory-group-repository/find-all.html","searchKeys":["findAll","open override fun findAll(): List<Group>","InMemoryGroupRepository.findAll"]},{"name":"open override fun findAll(): List<Group>","description":"PostgresGroupRepository.findAll","location":"storage/[root]/-postgres-group-repository/find-all.html","searchKeys":["findAll","open override fun findAll(): List<Group>","PostgresGroupRepository.findAll"]},{"name":"open override fun findAll(): List<User>","description":"InMemoryUserRepository.findAll","location":"storage/[root]/-in-memory-user-repository/find-all.html","searchKeys":["findAll","open override fun findAll(): List<User>","InMemoryUserRepository.findAll"]},{"name":"open override fun findAll(): List<User>","description":"PostgresUserRepository.findAll","location":"storage/[root]/-postgres-user-repository/find-all.html","searchKeys":["findAll","open override fun findAll(): List<User>","PostgresUserRepository.findAll"]},{"name":"open override fun findById(groupId: String): Group?","description":"InMemoryGroupRepository.findById","location":"storage/[root]/-in-memory-group-repository/find-by-id.html","searchKeys":["findById","open override fun findById(groupId: String): Group?","InMemoryGroupRepository.findById"]},{"name":"open override fun findById(groupId: String): Group?","description":"PostgresGroupRepository.findById","location":"storage/[root]/-postgres-group-repository/find-by-id.html","searchKeys":["findById","open override fun findById(groupId: String): Group?","PostgresGroupRepository.findById"]},{"name":"open override fun findById(userId: String): User?","description":"InMemoryUserRepository.findById","location":"storage/[root]/-in-memory-user-repository/find-by-id.html","searchKeys":["findById","open override fun findById(userId: String): User?","InMemoryUserRepository.findById"]},{"name":"open override fun findById(userId: String): User?","description":"PostgresUserRepository.findById","location":"storage/[root]/-postgres-user-repository/find-by-id.html","searchKeys":["findById","open override fun findById(userId: String): User?","PostgresUserRepository.findById"]},{"name":"open override fun removeMember(groupId: String, userData: UserData): Group?","description":"InMemoryGroupRepository.removeMember","location":"storage/[root]/-in-memory-group-repository/remove-member.html","searchKeys":["removeMember","open override fun removeMember(groupId: String, userData: UserData): Group?","InMemoryGroupRepository.removeMember"]},{"name":"open override fun removeMember(groupId: String, userData: UserData): Group?","description":"PostgresGroupRepository.removeMember","location":"storage/[root]/-postgres-group-repository/remove-member.html","searchKeys":["removeMember","open override fun removeMember(groupId: String, userData: UserData): Group?","PostgresGroupRepository.removeMember"]},{"name":"open override fun save(group: Group): Group","description":"InMemoryGroupRepository.save","location":"storage/[root]/-in-memory-group-repository/save.html","searchKeys":["save","open override fun save(group: Group): Group","InMemoryGroupRepository.save"]},{"name":"open override fun save(group: Group): Group","description":"PostgresGroupRepository.save","location":"storage/[root]/-postgres-group-repository/save.html","searchKeys":["save","open override fun save(group: Group): Group","PostgresGroupRepository.save"]},{"name":"open override fun save(user: User): User","description":"InMemoryUserRepository.save","location":"storage/[root]/-in-memory-user-repository/save.html","searchKeys":["save","open override fun save(user: User): User","InMemoryUserRepository.save"]},{"name":"open override fun save(user: User): User","description":"PostgresUserRepository.save","location":"storage/[root]/-postgres-user-repository/save.html","searchKeys":["save","open override fun save(user: User): User","PostgresUserRepository.save"]},{"name":"open override fun update(group: Group): Group?","description":"InMemoryGroupRepository.update","location":"storage/[root]/-in-memory-group-repository/update.html","searchKeys":["update","open override fun update(group: Group): Group?","InMemoryGroupRepository.update"]},{"name":"open override fun update(group: Group): Group?","description":"PostgresGroupRepository.update","location":"storage/[root]/-postgres-group-repository/update.html","searchKeys":["update","open override fun update(group: Group): Group?","PostgresGroupRepository.update"]},{"name":"open override fun update(user: User): User?","description":"InMemoryUserRepository.update","location":"storage/[root]/-in-memory-user-repository/update.html","searchKeys":["update","open override fun update(user: User): User?","InMemoryUserRepository.update"]},{"name":"open override fun update(user: User): User?","description":"PostgresUserRepository.update","location":"storage/[root]/-postgres-user-repository/update.html","searchKeys":["update","open override fun update(user: User): User?","PostgresUserRepository.update"]},{"name":"val Database.groups: EntitySequence<Group, Groups>","description":"DBConnection.groups","location":"storage/[root]/-d-b-connection/groups.html","searchKeys":["groups","val Database.groups: EntitySequence<Group, Groups>","DBConnection.groups"]},{"name":"val Database.memberships: EntitySequence<Membership, Memberships>","description":"DBConnection.memberships","location":"storage/[root]/-d-b-connection/memberships.html","searchKeys":["memberships","val Database.memberships: EntitySequence<Membership, Memberships>","DBConnection.memberships"]},{"name":"val Database.users: EntitySequence<User, Users>","description":"DBConnection.users","location":"storage/[root]/-d-b-connection/users.html","searchKeys":["users","val Database.users: EntitySequence<User, Users>","DBConnection.users"]},{"name":"val createdBy: Column<String>","description":"Groups.createdBy","location":"storage/[root]/-groups/created-by.html","searchKeys":["createdBy","val createdBy: Column<String>","Groups.createdBy"]},{"name":"val email: Column<String>","description":"Users.email","location":"storage/[root]/-users/email.html","searchKeys":["email","val email: Column<String>","Users.email"]},{"name":"val groupId: Column<String>","description":"Memberships.groupId","location":"storage/[root]/-memberships/group-id.html","searchKeys":["groupId","val groupId: Column<String>","Memberships.groupId"]},{"name":"val id: Column<String>","description":"Groups.id","location":"storage/[root]/-groups/id.html","searchKeys":["id","val id: Column<String>","Groups.id"]},{"name":"val id: Column<String>","description":"Users.id","location":"storage/[root]/-users/id.html","searchKeys":["id","val id: Column<String>","Users.id"]},{"name":"val name: Column<String>","description":"Groups.name","location":"storage/[root]/-groups/name.html","searchKeys":["name","val name: Column<String>","Groups.name"]},{"name":"val name: Column<String>","description":"Users.name","location":"storage/[root]/-users/name.html","searchKeys":["name","val name: Column<String>","Users.name"]},{"name":"val password: Column<String>","description":"Users.password","location":"storage/[root]/-users/password.html","searchKeys":["password","val password: Column<String>","Users.password"]},{"name":"val surname: Column<String>","description":"Users.surname","location":"storage/[root]/-users/surname.html","searchKeys":["surname","val surname: Column<String>","Users.surname"]},{"name":"val userId: Column<String>","description":"Memberships.userId","location":"storage/[root]/-memberships/user-id.html","searchKeys":["userId","val userId: Column<String>","Memberships.userId"]},{"name":"class RabbitMQMessageAdapter(val rabbitMQHost: String = \"localhost\", val rabbitMQPort: Int = 5672, val rabbitMQUsername: String = \"guest\", val rabbitMQPassword: String = \"guest\", serializer: EventSerializer) : MessageAdapter","description":"RabbitMQMessageAdapter","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/index.html","searchKeys":["RabbitMQMessageAdapter","class RabbitMQMessageAdapter(val rabbitMQHost: String = \"localhost\", val rabbitMQPort: Int = 5672, val rabbitMQUsername: String = \"guest\", val rabbitMQPassword: String = \"guest\", serializer: EventSerializer) : MessageAdapter","RabbitMQMessageAdapter"]},{"name":"constructor(rabbitMQHost: String = \"localhost\", rabbitMQPort: Int = 5672, rabbitMQUsername: String = \"guest\", rabbitMQPassword: String = \"guest\", serializer: EventSerializer)","description":"RabbitMQMessageAdapter.RabbitMQMessageAdapter","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/-rabbit-m-q-message-adapter.html","searchKeys":["RabbitMQMessageAdapter","constructor(rabbitMQHost: String = \"localhost\", rabbitMQPort: Int = 5672, rabbitMQUsername: String = \"guest\", rabbitMQPassword: String = \"guest\", serializer: EventSerializer)","RabbitMQMessageAdapter.RabbitMQMessageAdapter"]},{"name":"open override fun close()","description":"RabbitMQMessageAdapter.close","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/close.html","searchKeys":["close","open override fun close()","RabbitMQMessageAdapter.close"]},{"name":"open override fun postEvent(type: EventType, event: Event)","description":"RabbitMQMessageAdapter.postEvent","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/post-event.html","searchKeys":["postEvent","open override fun postEvent(type: EventType, event: Event)","RabbitMQMessageAdapter.postEvent"]},{"name":"val rabbitMQHost: String","description":"RabbitMQMessageAdapter.rabbitMQHost","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/rabbit-m-q-host.html","searchKeys":["rabbitMQHost","val rabbitMQHost: String","RabbitMQMessageAdapter.rabbitMQHost"]},{"name":"val rabbitMQPassword: String","description":"RabbitMQMessageAdapter.rabbitMQPassword","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/rabbit-m-q-password.html","searchKeys":["rabbitMQPassword","val rabbitMQPassword: String","RabbitMQMessageAdapter.rabbitMQPassword"]},{"name":"val rabbitMQPort: Int = 5672","description":"RabbitMQMessageAdapter.rabbitMQPort","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/rabbit-m-q-port.html","searchKeys":["rabbitMQPort","val rabbitMQPort: Int = 5672","RabbitMQMessageAdapter.rabbitMQPort"]},{"name":"val rabbitMQUsername: String","description":"RabbitMQMessageAdapter.rabbitMQUsername","location":"rabbitmq/[root]/-rabbit-m-q-message-adapter/rabbit-m-q-username.html","searchKeys":["rabbitMQUsername","val rabbitMQUsername: String","RabbitMQMessageAdapter.rabbitMQUsername"]},{"name":"class GrpcAuthServiceAdapter(authService: AuthService) : AuthServiceGrpcKt.AuthServiceCoroutineImplBase","description":"GrpcAuthServiceAdapter","location":"grpc/[root]/-grpc-auth-service-adapter/index.html","searchKeys":["GrpcAuthServiceAdapter","class GrpcAuthServiceAdapter(authService: AuthService) : AuthServiceGrpcKt.AuthServiceCoroutineImplBase","GrpcAuthServiceAdapter"]},{"name":"class GrpcGroupServiceAdapter(groupService: GroupService) : GroupServiceGrpcKt.GroupServiceCoroutineImplBase","description":"GrpcGroupServiceAdapter","location":"grpc/[root]/-grpc-group-service-adapter/index.html","searchKeys":["GrpcGroupServiceAdapter","class GrpcGroupServiceAdapter(groupService: GroupService) : GroupServiceGrpcKt.GroupServiceCoroutineImplBase","GrpcGroupServiceAdapter"]},{"name":"class GrpcUserServiceAdapter(userService: UserService) : UserServiceGrpcKt.UserServiceCoroutineImplBase","description":"GrpcUserServiceAdapter","location":"grpc/[root]/-grpc-user-service-adapter/index.html","searchKeys":["GrpcUserServiceAdapter","class GrpcUserServiceAdapter(userService: UserService) : UserServiceGrpcKt.UserServiceCoroutineImplBase","GrpcUserServiceAdapter"]},{"name":"const val GROUP_NOT_FOUND_MESSAGE: String","description":"GROUP_NOT_FOUND_MESSAGE","location":"grpc/[root]/-g-r-o-u-p_-n-o-t_-f-o-u-n-d_-m-e-s-s-a-g-e.html","searchKeys":["GROUP_NOT_FOUND_MESSAGE","const val GROUP_NOT_FOUND_MESSAGE: String","GROUP_NOT_FOUND_MESSAGE"]},{"name":"const val USER_NOT_FOUND_MESSAGE: String","description":"USER_NOT_FOUND_MESSAGE","location":"grpc/[root]/-u-s-e-r_-n-o-t_-f-o-u-n-d_-m-e-s-s-a-g-e.html","searchKeys":["USER_NOT_FOUND_MESSAGE","const val USER_NOT_FOUND_MESSAGE: String","USER_NOT_FOUND_MESSAGE"]},{"name":"constructor(authService: AuthService)","description":"GrpcAuthServiceAdapter.GrpcAuthServiceAdapter","location":"grpc/[root]/-grpc-auth-service-adapter/-grpc-auth-service-adapter.html","searchKeys":["GrpcAuthServiceAdapter","constructor(authService: AuthService)","GrpcAuthServiceAdapter.GrpcAuthServiceAdapter"]},{"name":"constructor(groupService: GroupService)","description":"GrpcGroupServiceAdapter.GrpcGroupServiceAdapter","location":"grpc/[root]/-grpc-group-service-adapter/-grpc-group-service-adapter.html","searchKeys":["GrpcGroupServiceAdapter","constructor(groupService: GroupService)","GrpcGroupServiceAdapter.GrpcGroupServiceAdapter"]},{"name":"constructor(userService: UserService)","description":"GrpcUserServiceAdapter.GrpcUserServiceAdapter","location":"grpc/[root]/-grpc-user-service-adapter/-grpc-user-service-adapter.html","searchKeys":["GrpcUserServiceAdapter","constructor(userService: UserService)","GrpcUserServiceAdapter.GrpcUserServiceAdapter"]},{"name":"fun createStatus(code: UserOuterClass.StatusCode, message: String): UserOuterClass.Status","description":"StatusUtility.createStatus","location":"grpc/[root]/-status-utility/create-status.html","searchKeys":["createStatus","fun createStatus(code: UserOuterClass.StatusCode, message: String): UserOuterClass.Status","StatusUtility.createStatus"]},{"name":"object StatusUtility","description":"StatusUtility","location":"grpc/[root]/-status-utility/index.html","searchKeys":["StatusUtility","object StatusUtility","StatusUtility"]},{"name":"open suspend override fun addMember(request: GroupOuterClass.AddMemberRequest): GroupOuterClass.AddMemberResponse","description":"GrpcGroupServiceAdapter.addMember","location":"grpc/[root]/-grpc-group-service-adapter/add-member.html","searchKeys":["addMember","open suspend override fun addMember(request: GroupOuterClass.AddMemberRequest): GroupOuterClass.AddMemberResponse","GrpcGroupServiceAdapter.addMember"]},{"name":"open suspend override fun authenticate(request: Auth.AuthenticateRequest): Auth.AuthenticateResponse","description":"GrpcAuthServiceAdapter.authenticate","location":"grpc/[root]/-grpc-auth-service-adapter/authenticate.html","searchKeys":["authenticate","open suspend override fun authenticate(request: Auth.AuthenticateRequest): Auth.AuthenticateResponse","GrpcAuthServiceAdapter.authenticate"]},{"name":"open suspend override fun authorize(request: Auth.AuthorizeRequest): Auth.AuthorizeResponse","description":"GrpcAuthServiceAdapter.authorize","location":"grpc/[root]/-grpc-auth-service-adapter/authorize.html","searchKeys":["authorize","open suspend override fun authorize(request: Auth.AuthorizeRequest): Auth.AuthorizeResponse","GrpcAuthServiceAdapter.authorize"]},{"name":"open suspend override fun createGroup(request: GroupOuterClass.CreateGroupRequest): GroupOuterClass.CreateGroupResponse","description":"GrpcGroupServiceAdapter.createGroup","location":"grpc/[root]/-grpc-group-service-adapter/create-group.html","searchKeys":["createGroup","open suspend override fun createGroup(request: GroupOuterClass.CreateGroupRequest): GroupOuterClass.CreateGroupResponse","GrpcGroupServiceAdapter.createGroup"]},{"name":"open suspend override fun createUser(request: UserOuterClass.CreateUserRequest): UserOuterClass.CreateUserResponse","description":"GrpcUserServiceAdapter.createUser","location":"grpc/[root]/-grpc-user-service-adapter/create-user.html","searchKeys":["createUser","open suspend override fun createUser(request: UserOuterClass.CreateUserRequest): UserOuterClass.CreateUserResponse","GrpcUserServiceAdapter.createUser"]},{"name":"open suspend override fun deleteGroup(request: GroupOuterClass.DeleteGroupRequest): GroupOuterClass.DeleteGroupResponse","description":"GrpcGroupServiceAdapter.deleteGroup","location":"grpc/[root]/-grpc-group-service-adapter/delete-group.html","searchKeys":["deleteGroup","open suspend override fun deleteGroup(request: GroupOuterClass.DeleteGroupRequest): GroupOuterClass.DeleteGroupResponse","GrpcGroupServiceAdapter.deleteGroup"]},{"name":"open suspend override fun deleteUser(request: UserOuterClass.DeleteUserRequest): UserOuterClass.DeleteUserResponse","description":"GrpcUserServiceAdapter.deleteUser","location":"grpc/[root]/-grpc-user-service-adapter/delete-user.html","searchKeys":["deleteUser","open suspend override fun deleteUser(request: UserOuterClass.DeleteUserRequest): UserOuterClass.DeleteUserResponse","GrpcUserServiceAdapter.deleteUser"]},{"name":"open suspend override fun getGroup(request: GroupOuterClass.GetGroupRequest): GroupOuterClass.GetGroupResponse","description":"GrpcGroupServiceAdapter.getGroup","location":"grpc/[root]/-grpc-group-service-adapter/get-group.html","searchKeys":["getGroup","open suspend override fun getGroup(request: GroupOuterClass.GetGroupRequest): GroupOuterClass.GetGroupResponse","GrpcGroupServiceAdapter.getGroup"]},{"name":"open suspend override fun getUser(request: UserOuterClass.GetUserRequest): UserOuterClass.GetUserResponse","description":"GrpcUserServiceAdapter.getUser","location":"grpc/[root]/-grpc-user-service-adapter/get-user.html","searchKeys":["getUser","open suspend override fun getUser(request: UserOuterClass.GetUserRequest): UserOuterClass.GetUserResponse","GrpcUserServiceAdapter.getUser"]},{"name":"open suspend override fun removeMember(request: GroupOuterClass.RemoveMemberRequest): GroupOuterClass.RemoveMemberResponse","description":"GrpcGroupServiceAdapter.removeMember","location":"grpc/[root]/-grpc-group-service-adapter/remove-member.html","searchKeys":["removeMember","open suspend override fun removeMember(request: GroupOuterClass.RemoveMemberRequest): GroupOuterClass.RemoveMemberResponse","GrpcGroupServiceAdapter.removeMember"]},{"name":"open suspend override fun updateGroup(request: GroupOuterClass.UpdateGroupRequest): GroupOuterClass.UpdateGroupResponse","description":"GrpcGroupServiceAdapter.updateGroup","location":"grpc/[root]/-grpc-group-service-adapter/update-group.html","searchKeys":["updateGroup","open suspend override fun updateGroup(request: GroupOuterClass.UpdateGroupRequest): GroupOuterClass.UpdateGroupResponse","GrpcGroupServiceAdapter.updateGroup"]},{"name":"open suspend override fun updateUser(request: UserOuterClass.UpdateUserRequest): UserOuterClass.UpdateUserResponse","description":"GrpcUserServiceAdapter.updateUser","location":"grpc/[root]/-grpc-user-service-adapter/update-user.html","searchKeys":["updateUser","open suspend override fun updateUser(request: UserOuterClass.UpdateUserRequest): UserOuterClass.UpdateUserResponse","GrpcUserServiceAdapter.updateUser"]}]